{"version":3,"file":"sidebar_menu.min.js","sources":["../src/sidebar_menu.js"],"sourcesContent":["/* eslint-disable no-trailing-spaces */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {isSmall} from 'core/pagehelpers';\nimport {setUserPreferences, getUserPreferences} from 'core_user/repository';\n\n/**\n * JavaScript for the Snap theme sidebar menu functionality\n *\n * @module     theme_snap/sidebar_menu\n * @copyright  2024 Open LMS (https://www.openlms.net)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst SELECTORS = {\n    SIDEBAR: '#snap-sidebar-menu',\n    TRIGGER: '.snap-sidebar-menu-trigger',\n    TRIGGER_ICON: '.snap-sidebar-menu-trigger i',\n    HEADER: 'header',\n    DRAWER_BUTTON: '.snap-sidebar-menu-item[data-activeselector]',\n    MESSAGES_POPOVER: '[data-region=\"popover-region-messages\"]',\n    CLOSE_DRAWER_BUTTON: '[data-action=\"closedrawer\"]',\n    SIDEBAR_MENU_ITEM: '.snap-sidebar-menu-item',\n    NAV_UNPINNED: '#mr-nav.headroom--unpinned',\n    GOTO_TOP_LINK: '#goto-top-link',\n    COURSE_TOC: '#course-toc',\n};\n\nconst CLASSES = {\n    CUSTOM_MENU_ITEM: 'custom-menu-item',\n    SHOW: 'show',\n    ACTIVE: 'active',\n    COLLAPSED: 'collapsed',\n    ROTATE: 'rotate-180',\n    STATE_VISIBLE: 'state-visible',\n    POSITIONING_OFFSCREEN: 'positioning-offscreen',\n};\n\nconst DRAWERS = {\n    SELECTORS: [\n        '.drawer',\n        '.block_settings.block',\n        '#snap_feeds_side_menu',\n        '.drawer:has(.message-app)'\n    ],\n    ACTIVE_SELECTORS: [\n        '.drawer.show',\n        '.block_settings.block.state-visible',\n        '#snap_feeds_side_menu.state-visible',\n        '.drawer:not(.hidden):has(.message-app)'\n    ]\n};\n\nconst POPOVERS_DROPDOWNS = {\n    CLICKABLE_SELECTORS: [\n        '#user-menu-toggle', // User menu\n        '#nav-intellicart-popover-container', // Intellicart\n        '#nav-notification-popover-container', // Notifications\n    ]\n};\n\nconst ACTIVE_SELECTORS = {\n    BLOCKS_DRAWER: '[data-activeselector=\"#theme_snap-drawers-blocks.show\"]',\n    SNAP_FEEDS: '[data-activeselector=\"#snap_feeds_side_menu_trigger.active\"]',\n    MESSAGES_DRAWER: '[data-activeselector=\\'[data-region=\"popover-region-messages\"]:not(.collapsed)\\']',\n};\n\nconst PREFERENCES = {\n    BLOCKS_DRAWER: 'drawer-open-block',\n    SNAP_FEEDS: 'snap-feeds-open',\n    MESSAGES_DRAWER: 'snap-message-drawer-open',\n};\n\nconst PREFERENCE_MAP = {\n    [PREFERENCES.BLOCKS_DRAWER]: ACTIVE_SELECTORS.BLOCKS_DRAWER,\n    [PREFERENCES.SNAP_FEEDS]: ACTIVE_SELECTORS.SNAP_FEEDS,\n    [PREFERENCES.MESSAGES_DRAWER]: ACTIVE_SELECTORS.MESSAGES_DRAWER,\n};\n\nlet lastScrollX = 0;\n\n/**\n * Toggle sidebar menu visibility and update its position\n */\nconst toggleSidebar = () => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const icon = document.querySelector(SELECTORS.TRIGGER_ICON);\n    const isClosing = sidebar.classList.contains(CLASSES.SHOW);\n\n    sidebar.classList.toggle(CLASSES.SHOW);\n    icon.classList.toggle(CLASSES.ROTATE);\n    updateElementPositions();\n    \n    // If we're closing the sidebar, close any open drawers\n    if (isClosing) {\n        closeAllDrawers();\n    }\n};\n\n/**\n * Update the position of UI elements relative to the header\n * @param {Array|string|null} selectors - CSS selector(s) for elements to update, or null for sidebar only\n */\nconst updateElementPositions = (selectors = null) => {\n    const header = document.querySelector(SELECTORS.HEADER);\n    if (!header) {\n        return;\n    }\n\n    const headerRect = header.getBoundingClientRect();\n    const visibleHeight = window.innerHeight;\n    const topPosition = Math.max(0, headerRect.bottom);\n    const isNavUnpinned = document.querySelector(SELECTORS.NAV_UNPINNED);\n    \n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    if (sidebar) {\n        if (isNavUnpinned) {\n            sidebar.style.top = '0px';\n            sidebar.style.height = '100vh';\n        } else {\n            sidebar.style.top = `${topPosition}px`;\n            sidebar.style.height = `${visibleHeight - topPosition}px`;\n        }\n        \n        // Remove positioning-offscreen class after positioning is complete\n        // Add a small delay before removing the positioning-offscreen class\n        setTimeout(() => {\n            sidebar.classList.remove(CLASSES.POSITIONING_OFFSCREEN);\n        }, 100);\n    }\n\n    if (selectors) {\n        const selectorsArray = Array.isArray(selectors) ? selectors : [selectors];\n        \n        // Update each element's position\n        selectorsArray.forEach(selector => {\n            const elements = queryActiveDrawers(selector);\n            \n            elements.forEach(element => {    \n                if (isNavUnpinned) {\n                    element.style.top = '0px';\n                    element.style.height = '100vh';\n                } else {\n                    element.style.top = `${topPosition}px`;\n                    element.style.height = `${visibleHeight - topPosition}px`;\n                }\n                \n                // Ensure the element is visible within the viewport if it's active\n                if (element.classList.contains(CLASSES.SHOW) || \n                    element.classList.contains(CLASSES.ACTIVE) || \n                    !element.classList.contains(CLASSES.COLLAPSED)) {\n                    element.style.maxHeight = isNavUnpinned ? '100vh' : `${visibleHeight - topPosition}px`;\n                }\n            });\n        });\n    }\n};\n\n/**\n * Handle drawer button clicks\n * @param {Event} e - The event object\n */\nconst handleDrawerButtonClick = (e) => {\n    setTimeout(() => {\n        const button = e.target.closest(SELECTORS.DRAWER_BUTTON);\n        repositionGotoTopLink();\n        if (!button) {\n            return;\n        }\n\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector) {\n            return;\n        }\n\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(\n            (el) =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            // If this drawer is being opened, close others\n            closeOtherDrawers(activeSelector, button);\n            button.classList.add(CLASSES.ACTIVE);\n            setDrawerPreference(activeSelector, true);\n        } else {\n            button.classList.remove(CLASSES.ACTIVE);\n            setDrawerPreference(activeSelector, false);\n        }\n    }, 50); // Small delay to allow the drawer state to update\n};\n\n/**\n * Close all active drawers except the one matching the given selector\n * @param {string} currentSelector - The selector for the drawer to keep open\n * @param {Element} currentButton - The button that was clicked\n */\nconst closeOtherDrawers = (currentSelector, currentButton) => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n    repositionGotoTopLink();\n    drawerButtons.forEach(button => {\n        if (button === currentButton) {\n            return;\n        }\n\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector || activeSelector === currentSelector) {\n            return;\n        }\n\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            setDrawerPreference(activeSelector, false);\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Close all active drawers\n */\nconst closeAllDrawers = () => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n    repositionGotoTopLink();\n    drawerButtons.forEach(button => {\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector) {\n            return;\n        }\n        \n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Handle messages popover click\n * @param {Event} e - The event object\n */\nconst handleMessagesPopoverClick = (e) => {\n    const sidebarItem = e.currentTarget.closest(SELECTORS.SIDEBAR_MENU_ITEM);\n    repositionGotoTopLink();\n    if (sidebarItem) {\n        const isCollapsed = e.currentTarget.classList.contains(CLASSES.COLLAPSED);\n        if (isCollapsed) {\n            e.currentTarget.classList.remove(CLASSES.COLLAPSED);\n        } else {\n            e.currentTarget.classList.add(CLASSES.COLLAPSED);\n        }\n    }\n};\n\n/**\n * Set the Actual Drawer based on user preferences.\n *\n * @return {Promise}\n */\nconst setActiveDrawer = async() => {\n    const preferences = await getUserPreferences();\n    const preferencesArray = {};\n    preferences.preferences.forEach(pref => {\n        if (M.cfg.behatsiterunning) {\n            preferencesArray[pref.name] = 0;\n        } else {\n            preferencesArray[pref.name] = pref.value;\n        }\n    });\n    // Review which user preference is set to true, from PREFERENCE_MAP\n    for (const [prefKey, drawerSelector] of Object.entries(PREFERENCE_MAP)) {\n        // See if any Drawer was opened. (Preference set to 1)\n        const shouldOpen = preferencesArray[prefKey] === 1 || preferencesArray[prefKey] === '1';\n\n        if (shouldOpen) {\n            const button = document.querySelector(drawerSelector);\n            if (button) {\n                // Simulate click on button.\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            }\n        }\n    }\n};\n\n/**\n * Set User preferences for the corresponding Drawer selected.\n * If \"Value\" = true, sets selected drawer to open and others to closed.\n * If \"Value\" = false, sets selected drawer to closed only.\n * @param {string} activeSelector - The selector for the drawer requested\n * @param {boolean} value - The value for the preference\n */\nconst setDrawerPreference = (activeSelector, value) => {\n    // Loop all preferences map and set true or false to selected one.\n    for (const [preference, selector] of Object.entries(PREFERENCE_MAP)) {\n        if (selector.includes(activeSelector) && !isSmall() && value) {\n            // Set open status to selected Drawer.\n            setUserPreferences([{name: preference, value: true}]);\n        } else if (value) {\n            // Set closed status to other Drawers.\n            setUserPreferences([{name: preference, value: false}]);\n        } else if (selector.includes(activeSelector) && !value) {\n            // Set closed status to selected Drawer.\n            setUserPreferences([{name: preference, value: false}]);\n        }\n    }\n};\n\n\n/**\n * Handle close drawer button clicks\n */\nconst handleCloseDrawerClick = () => {\n    repositionGotoTopLink();\n    // Remove active classes from all drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.classList.remove(CLASSES.ACTIVE);\n    });\n    \n    // Add collapsed class to messages popover if it's open\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover && !messagesPopover.classList.contains(CLASSES.COLLAPSED)) {\n        messagesPopover.classList.add(CLASSES.COLLAPSED);\n    }\n};\n\n/**\n * Setup all event listeners\n */\nconst setupEventListeners = () => {\n    const trigger = document.querySelector(SELECTORS.TRIGGER);\n    if (trigger) {\n        trigger.addEventListener('click', toggleSidebar);\n    }\n\n    // Update both sidebar and drawer positions on resize and scroll\n    window.addEventListener('resize', () => {\n        updateElementPositions(DRAWERS.SELECTORS);\n    });\n    \n    window.addEventListener('scroll', () => {\n        // Add a small delay to avoid performance issues with rapid scroll events\n        setTimeout(() => {\n            updateElementPositions(DRAWERS.SELECTORS);\n            \n            // Check if Go to Top link is visible and reposition it if needed\n            const gotoTopLink = document.querySelector(SELECTORS.GOTO_TOP_LINK);\n            if (gotoTopLink) {\n                const computedStyle = window.getComputedStyle(gotoTopLink);\n                if (computedStyle.visibility === 'visible') {\n                    repositionGotoTopLink();\n                }\n            }\n            \n            // Handle horizontal scrolling to control sticky elements (e.g. grader)\n            toggleSidebarOnHorizontalScroll(window.scrollX);\n        }, 50);\n    });\n\n    // Add click event listeners to drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.addEventListener('click', handleDrawerButtonClick);\n    });\n    \n    // Add click event listener to messages popover\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover) {\n        messagesPopover.addEventListener('click', handleMessagesPopoverClick);\n    }\n    \n    // Add click event listeners to elements with data-action=\"closedrawer\"\n    document.querySelectorAll(SELECTORS.CLOSE_DRAWER_BUTTON).forEach(element => {\n        element.addEventListener('click', handleCloseDrawerClick);\n    });\n    \n    // Set up popover/dropdown click handlers\n    setupPopoverClickHandlers();\n};\n\n/**\n * Initialize the sidebar menu functionality\n */\nexport const init = () => {\n    setupEventListeners();\n    updateElementPositions();\n    \n    // Update positions of all drawers\n    updateElementPositions(DRAWERS.SELECTORS);\n    // Open active Drawer.\n    setActiveDrawer();\n};\n\n/**\n * Query active drawers, applying a workaround for selectors containing ':has' if needed.\n * TODO: Delete this when the selenium version of the job is higher than 3.141.59\n *\n * @param {string} selector The CSS selector to query.\n * @returns {NodeListOf<Element>|Array<Element>} A NodeList or an Array of matching elements.\n */\nconst queryActiveDrawers = (selector) => {\n    // Check if the selector string contains ':has(' and matches the specific known case\n    if (selector === '.drawer:not(.hidden):has(.message-app)') {\n        // Workaround for :has(.message-app)\n        const potentialDrawers = document.querySelectorAll('.drawer:not(.hidden)');\n        return Array.from(potentialDrawers).filter(drawer => drawer.querySelector('.message-app'));\n    } else if (selector === '.drawer:has(.message-app)') {\n        const potentialDrawers = document.querySelectorAll('.drawer');\n        return Array.from(potentialDrawers).filter(drawer => drawer.querySelector('.message-app'));\n    } else {\n        // Standard query for other selectors\n        return document.querySelectorAll(selector);\n    }\n};\n\n/**\n * Reposition the \"Go to Top\" button based on open drawers\n */\nconst repositionGotoTopLink = () => {\n    const gotoTopLink = document.querySelector(SELECTORS.GOTO_TOP_LINK);\n    if (!gotoTopLink) {\n        return;\n    }\n    \n    gotoTopLink.style.marginRight = '';\n    \n    // Check if sidebar is showing\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const isSidebarShowing = sidebar && sidebar.classList.contains(CLASSES.SHOW);\n    \n    // Only proceed if sidebar is showing\n    if (isSidebarShowing) {\n        // Check each drawer selector using the helper function\n        for (const selector of DRAWERS.ACTIVE_SELECTORS) {\n            const activeDrawers = queryActiveDrawers(selector); // Use the helper function\n\n            if (activeDrawers.length > 0) {\n                // Get the first active drawer found for this selector type\n                const drawer = activeDrawers[0];\n                if (drawer.offsetWidth > 0) {\n                    // Get the width of the drawer\n                    const drawerWidth = drawer.offsetWidth;\n                    // Add margin to position the link to the left of the drawer\n                    gotoTopLink.style.marginRight = `${drawerWidth}px`;\n                    return; // Exit after finding the first open drawer\n                }\n            }\n        }\n    }\n};\n\n/**\n * Hide or show the sidebar based on horizontal scroll position\n * @param {number} scrollX - The horizontal scroll position\n */\nconst toggleSidebarOnHorizontalScroll = (scrollX) => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    if (!sidebar) {\n        return;\n    }\n    if (scrollX !== 0) {\n        if (lastScrollX === 0) {\n            // Hide sidebar\n            sidebar.style.right = '-100%';\n            \n            // Hide active drawers\n            DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n                const activeDrawers = queryActiveDrawers(selector); // Use the helper function\n                activeDrawers.forEach(drawer => {\n                    drawer.style.right = '-100%';\n                });\n            });\n        }\n    } else if (lastScrollX !== 0) {\n        // When returning to scroll position 0\n        sidebar.style.right = '';\n        \n        // Restore active drawers visibility\n        DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n            const activeDrawers = queryActiveDrawers(selector); // Use the helper function\n            activeDrawers.forEach(drawer => {\n                drawer.style.right = '';\n            });\n        });\n    }\n    lastScrollX = scrollX;\n};\n\n/**\n * Add event listeners to popover/dropdown elements to close drawers first\n */\nconst setupPopoverClickHandlers = () => {\n    let isClosingDrawers = false;\n\n    const checkAndCloseDrawers = () => {\n        if (isClosingDrawers) {\n            return false;\n        }\n\n        let hasOpenDrawers = false;\n        DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n            const activeDrawers = queryActiveDrawers(selector); // Use the helper function\n            if (activeDrawers.length > 0) {\n                hasOpenDrawers = true;\n            }\n        });\n\n        if (hasOpenDrawers) {\n            // Set flag to prevent recursive calls\n            isClosingDrawers = true;\n            // Close all drawers first\n            closeAllDrawers();\n            isClosingDrawers = false;\n            return true;\n        }\n\n        return false;\n    };\n\n    POPOVERS_DROPDOWNS.CLICKABLE_SELECTORS.forEach(selector => {\n        const elements = document.querySelectorAll(selector);\n\n        elements.forEach(element => {\n            // Handle mouse clicks\n            element.addEventListener('click', () => {\n                checkAndCloseDrawers();\n            }, true);\n\n            // Handle keyboard events (Enter key)\n            element.addEventListener('keydown', (e) => {\n                // Check if the Enter key was pressed\n                if (e.key === 'Enter' || e.keyCode === 13) {\n                    checkAndCloseDrawers();\n                }\n            }, true);\n        });\n    });\n};\n"],"names":["SELECTORS","CLASSES","DRAWERS","ACTIVE_SELECTORS","POPOVERS_DROPDOWNS","CLICKABLE_SELECTORS","PREFERENCE_MAP","lastScrollX","toggleSidebar","sidebar","document","querySelector","icon","isClosing","classList","contains","toggle","updateElementPositions","closeAllDrawers","selectors","header","headerRect","getBoundingClientRect","visibleHeight","window","innerHeight","topPosition","Math","max","bottom","isNavUnpinned","style","top","height","setTimeout","remove","Array","isArray","forEach","selector","queryActiveDrawers","element","maxHeight","handleDrawerButtonClick","e","button","target","closest","repositionGotoTopLink","activeSelector","dataset","activeselector","activeElements","querySelectorAll","from","some","el","closeOtherDrawers","add","setDrawerPreference","currentSelector","currentButton","drawerButtons","click","handleMessagesPopoverClick","sidebarItem","currentTarget","value","preference","Object","entries","includes","name","handleCloseDrawerClick","messagesPopover","trigger","addEventListener","gotoTopLink","getComputedStyle","visibility","toggleSidebarOnHorizontalScroll","scrollX","setupPopoverClickHandlers","setupEventListeners","async","preferences","preferencesArray","pref","M","cfg","behatsiterunning","prefKey","drawerSelector","setActiveDrawer","potentialDrawers","filter","drawer","marginRight","activeDrawers","length","offsetWidth","drawerWidth","right","isClosingDrawers","checkAndCloseDrawers","hasOpenDrawers","key","keyCode"],"mappings":"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"}