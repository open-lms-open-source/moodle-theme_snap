{"version":3,"file":"sidebar_menu.min.js","sources":["../src/sidebar_menu.js"],"sourcesContent":["/* eslint-disable no-trailing-spaces */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the Snap theme sidebar menu functionality\n *\n * @module     theme_snap/sidebar_menu\n * @copyright  2024 Open LMS (https://www.openlms.net)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst SELECTORS = {\n    SIDEBAR: '#snap-sidebar-menu',\n    TRIGGER: '.snap-sidebar-menu-trigger',\n    TRIGGER_ICON: '.snap-sidebar-menu-trigger i',\n    HEADER: 'header',\n    DRAWER_BUTTON: '.snap-sidebar-menu-item[data-activeselector]',\n    MESSAGES_POPOVER: '[data-region=\"popover-region-messages\"]',\n    CLOSE_DRAWER_BUTTON: '[data-action=\"closedrawer\"]',\n    SIDEBAR_MENU_ITEM: '.snap-sidebar-menu-item',\n    NAV_UNPINNED: '#mr-nav.headroom--unpinned',\n    GOTO_TOP_LINK: '#goto-top-link',\n    COURSE_TOC: '#course-toc',\n};\n\nconst CLASSES = {\n    CUSTOM_MENU_ITEM: 'custom-menu-item',\n    SHOW: 'show',\n    ACTIVE: 'active',\n    COLLAPSED: 'collapsed',\n    ROTATE: 'rotate-180',\n    STATE_VISIBLE: 'state-visible',\n    POSITIONING_OFFSCREEN: 'positioning-offscreen',\n};\n\nconst DRAWERS = {\n    SELECTORS: [\n        '.drawer',\n        '.block_settings.block',\n        '#snap_feeds_side_menu',\n        '.drawer:has(.message-app)'\n    ],\n    ACTIVE_SELECTORS: [\n        '.drawer.show',\n        '.block_settings.block.state-visible',\n        '#snap_feeds_side_menu.state-visible',\n        '.drawer:not(.hidden):has(.message-app)'\n    ]\n};\n\nconst POPOVERS_DROPDOWNS = {\n    CLICKABLE_SELECTORS: [\n        '#user-menu-toggle', // User menu\n        '#nav-intellicart-popover-container', // Intellicart\n        '#nav-notification-popover-container', // Notifications\n    ]\n};\n\nlet lastScrollX = 0;\n\n/**\n * Toggle sidebar menu visibility and update its position\n */\nconst toggleSidebar = () => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const icon = document.querySelector(SELECTORS.TRIGGER_ICON);\n    const isClosing = sidebar.classList.contains(CLASSES.SHOW);\n\n    sidebar.classList.toggle(CLASSES.SHOW);\n    icon.classList.toggle(CLASSES.ROTATE);\n    updateElementPositions();\n    \n    // If we're closing the sidebar, close any open drawers\n    if (isClosing) {\n        closeAllDrawers();\n    }\n};\n\n/**\n * Update the position of UI elements relative to the header\n * @param {Array|string|null} selectors - CSS selector(s) for elements to update, or null for sidebar only\n */\nconst updateElementPositions = (selectors = null) => {\n    const header = document.querySelector(SELECTORS.HEADER);\n    if (!header) {\n        return;\n    }\n\n    const headerRect = header.getBoundingClientRect();\n    const visibleHeight = window.innerHeight;\n    const topPosition = Math.max(0, headerRect.bottom);\n    const isNavUnpinned = document.querySelector(SELECTORS.NAV_UNPINNED);\n    \n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    if (sidebar) {\n        if (isNavUnpinned) {\n            sidebar.style.top = '0px';\n            sidebar.style.height = '100vh';\n        } else {\n            sidebar.style.top = `${topPosition}px`;\n            sidebar.style.height = `${visibleHeight - topPosition}px`;\n        }\n        \n        // Remove positioning-offscreen class after positioning is complete\n        // Add a small delay before removing the positioning-offscreen class\n        setTimeout(() => {\n            sidebar.classList.remove(CLASSES.POSITIONING_OFFSCREEN);\n        }, 100);\n    }\n\n    if (selectors) {\n        const selectorsArray = Array.isArray(selectors) ? selectors : [selectors];\n        \n        // Update each element's position\n        selectorsArray.forEach(selector => {\n            const elements = document.querySelectorAll(selector);\n            \n            elements.forEach(element => {    \n                if (isNavUnpinned) {\n                    element.style.top = '0px';\n                    element.style.height = '100vh';\n                } else {\n                    element.style.top = `${topPosition}px`;\n                    element.style.height = `${visibleHeight - topPosition}px`;\n                }\n                \n                // Ensure the element is visible within the viewport if it's active\n                if (element.classList.contains(CLASSES.SHOW) || \n                    element.classList.contains(CLASSES.ACTIVE) || \n                    !element.classList.contains(CLASSES.COLLAPSED)) {\n                    element.style.maxHeight = isNavUnpinned ? '100vh' : `${visibleHeight - topPosition}px`;\n                }\n            });\n        });\n    }\n};\n\n/**\n * Handle drawer button clicks\n * @param {Event} e - The event object\n */\nconst handleDrawerButtonClick = (e) => {\n    setTimeout(() => {\n        const button = e.target.closest(SELECTORS.DRAWER_BUTTON);\n        repositionGotoTopLink();\n        if (!button) {\n            return;\n        }\n\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector) {\n            return;\n        }\n\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(\n            (el) =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            // If this drawer is being opened, close others\n            closeOtherDrawers(activeSelector, button);\n            button.classList.add(CLASSES.ACTIVE);\n        } else {\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    }, 50); // Small delay to allow the drawer state to update\n};\n\n/**\n * Close all active drawers except the one matching the given selector\n * @param {string} currentSelector - The selector for the drawer to keep open\n * @param {Element} currentButton - The button that was clicked\n */\nconst closeOtherDrawers = (currentSelector, currentButton) => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n    repositionGotoTopLink();\n    drawerButtons.forEach(button => {\n        if (button === currentButton) {\n            return;\n        }\n\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector || activeSelector === currentSelector) {\n            return;\n        }\n\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Close all active drawers\n */\nconst closeAllDrawers = () => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n    repositionGotoTopLink();\n    drawerButtons.forEach(button => {\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector) {\n            return;\n        }\n        \n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Handle messages popover click\n * @param {Event} e - The event object\n */\nconst handleMessagesPopoverClick = (e) => {\n    const sidebarItem = e.currentTarget.closest(SELECTORS.SIDEBAR_MENU_ITEM);\n    repositionGotoTopLink();\n    if (sidebarItem) {\n        const isCollapsed = e.currentTarget.classList.contains(CLASSES.COLLAPSED);\n        if (isCollapsed) {\n            e.currentTarget.classList.remove(CLASSES.COLLAPSED);\n        } else {\n            e.currentTarget.classList.add(CLASSES.COLLAPSED);\n        }\n    }\n};\n\n/**\n * Handle close drawer button clicks\n */\nconst handleCloseDrawerClick = () => {\n    repositionGotoTopLink();\n    // Remove active classes from all drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.classList.remove(CLASSES.ACTIVE);\n    });\n    \n    // Add collapsed class to messages popover if it's open\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover && !messagesPopover.classList.contains(CLASSES.COLLAPSED)) {\n        messagesPopover.classList.add(CLASSES.COLLAPSED);\n    }\n};\n\n/**\n * Setup all event listeners\n */\nconst setupEventListeners = () => {\n    const trigger = document.querySelector(SELECTORS.TRIGGER);\n    if (trigger) {\n        trigger.addEventListener('click', toggleSidebar);\n    }\n\n    // Update both sidebar and drawer positions on resize and scroll\n    window.addEventListener('resize', () => {\n        updateElementPositions(DRAWERS.SELECTORS);\n    });\n    \n    window.addEventListener('scroll', () => {\n        // Add a small delay to avoid performance issues with rapid scroll events\n        setTimeout(() => {\n            updateElementPositions(DRAWERS.SELECTORS);\n            \n            // Check if Go to Top link is visible and reposition it if needed\n            const gotoTopLink = document.querySelector(SELECTORS.GOTO_TOP_LINK);\n            if (gotoTopLink) {\n                const computedStyle = window.getComputedStyle(gotoTopLink);\n                if (computedStyle.visibility === 'visible') {\n                    repositionGotoTopLink();\n                }\n            }\n            \n            // Handle horizontal scrolling to control sticky elements (e.g. grader)\n            toggleSidebarOnHorizontalScroll(window.scrollX);\n        }, 50);\n    });\n\n    // Add click event listeners to drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.addEventListener('click', handleDrawerButtonClick);\n    });\n    \n    // Add click event listener to messages popover\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover) {\n        messagesPopover.addEventListener('click', handleMessagesPopoverClick);\n    }\n    \n    // Add click event listeners to elements with data-action=\"closedrawer\"\n    document.querySelectorAll(SELECTORS.CLOSE_DRAWER_BUTTON).forEach(element => {\n        element.addEventListener('click', handleCloseDrawerClick);\n    });\n    \n    // Set up course TOC observer\n    setupCourseTocObserver();\n    \n    // Set up popover/dropdown click handlers\n    setupPopoverClickHandlers();\n};\n\n/**\n * Set up a MutationObserver to watch for changes to #course-toc\n */\nconst setupCourseTocObserver = () => {\n    const courseToc = document.querySelector(SELECTORS.COURSE_TOC);\n    if (courseToc) {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                    if (courseToc.classList.contains(CLASSES.STATE_VISIBLE)) {\n                        // Close the sidebar when course TOC becomes visible\n                        const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n                        const icon = document.querySelector(SELECTORS.TRIGGER_ICON);\n                        \n                        if (sidebar && sidebar.classList.contains(CLASSES.SHOW)) {\n                            sidebar.classList.remove(CLASSES.SHOW);\n                            if (icon) {\n                                icon.classList.remove(CLASSES.ROTATE);\n                            }\n                            closeAllDrawers();\n                            updateElementPositions();\n                        }\n                    }\n                }\n            });\n        });\n        observer.observe(courseToc, { attributes: true });\n    }\n};\n\n/**\n * Initialize the sidebar menu functionality\n */\nexport const init = () => {\n    setupEventListeners();\n    updateElementPositions();\n    \n    // Update positions of all drawers\n    updateElementPositions(DRAWERS.SELECTORS);\n};\n\n/**\n * Reposition the \"Go to Top\" button based on open drawers\n */\nconst repositionGotoTopLink = () => {\n    const gotoTopLink = document.querySelector(SELECTORS.GOTO_TOP_LINK);\n    if (!gotoTopLink) {\n        return;\n    }\n    \n    gotoTopLink.style.marginRight = '';\n    \n    // Check if sidebar is showing\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const isSidebarShowing = sidebar && sidebar.classList.contains(CLASSES.SHOW);\n    \n    // Only proceed if sidebar is showing\n    if (isSidebarShowing) {\n        // Check each drawer selector\n        for (const selector of DRAWERS.ACTIVE_SELECTORS) {\n            const drawer = document.querySelector(selector);\n            \n            if (drawer && drawer.offsetWidth > 0) {\n                // Get the width of the drawer\n                const drawerWidth = drawer.offsetWidth;\n                // Add margin to position the link to the left of the drawer\n                gotoTopLink.style.marginRight = `${drawerWidth}px`;\n                return; // Exit after finding the first open drawer\n            }\n        }\n    }\n};\n\n/**\n * Hide or show the sidebar based on horizontal scroll position\n * @param {number} scrollX - The horizontal scroll position\n */\nconst toggleSidebarOnHorizontalScroll = (scrollX) => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    if (!sidebar) {\n        return;\n    }\n    if (scrollX !== 0) {\n        if (lastScrollX === 0) {\n            // Hide sidebar\n            sidebar.style.right = '-100%';\n            \n            // Hide active drawers\n            DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n                const activeDrawers = document.querySelectorAll(selector);\n                activeDrawers.forEach(drawer => {\n                    drawer.style.right = '-100%';\n                });\n            });\n        }\n    } else if (lastScrollX !== 0) {\n        // When returning to scroll position 0\n        sidebar.style.right = '';\n        \n        // Restore active drawers visibility\n        DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n            const activeDrawers = document.querySelectorAll(selector);\n            activeDrawers.forEach(drawer => {\n                drawer.style.right = '';\n            });\n        });\n    }\n    lastScrollX = scrollX;\n};\n\n/**\n * Add event listeners to popover/dropdown elements to close drawers first\n */\nconst setupPopoverClickHandlers = () => {\n    let isClosingDrawers = false;\n    \n    const checkAndCloseDrawers = () => {\n        if (isClosingDrawers) {\n            return false;\n        }\n        \n        let hasOpenDrawers = false;\n        DRAWERS.ACTIVE_SELECTORS.forEach(selector => {\n            const activeDrawers = document.querySelectorAll(selector);\n            if (activeDrawers.length > 0) {\n                hasOpenDrawers = true;\n            }\n        });\n        \n        if (hasOpenDrawers) {\n            // Set flag to prevent recursive calls\n            isClosingDrawers = true;    \n            // Close all drawers first\n            closeAllDrawers();\n            isClosingDrawers = false;\n            return true;\n        }\n        \n        return false;\n    };\n    \n    POPOVERS_DROPDOWNS.CLICKABLE_SELECTORS.forEach(selector => {\n        const elements = document.querySelectorAll(selector);\n        \n        elements.forEach(element => {\n            // Handle mouse clicks\n            element.addEventListener('click', () => {\n                checkAndCloseDrawers();\n            }, true);\n            \n            // Handle keyboard events (Enter key)\n            element.addEventListener('keydown', (e) => {\n                // Check if the Enter key was pressed\n                if (e.key === 'Enter' || e.keyCode === 13) {\n                    checkAndCloseDrawers();\n                }\n            }, true);\n        });\n    });\n};\n"],"names":["SELECTORS","CLASSES","DRAWERS","ACTIVE_SELECTORS","POPOVERS_DROPDOWNS","CLICKABLE_SELECTORS","lastScrollX","toggleSidebar","sidebar","document","querySelector","icon","isClosing","classList","contains","toggle","updateElementPositions","closeAllDrawers","selectors","header","headerRect","getBoundingClientRect","visibleHeight","window","innerHeight","topPosition","Math","max","bottom","isNavUnpinned","style","top","height","setTimeout","remove","Array","isArray","forEach","selector","querySelectorAll","element","maxHeight","handleDrawerButtonClick","e","button","target","closest","repositionGotoTopLink","activeSelector","dataset","activeselector","activeElements","from","some","el","closeOtherDrawers","add","currentSelector","currentButton","drawerButtons","click","handleMessagesPopoverClick","sidebarItem","currentTarget","handleCloseDrawerClick","messagesPopover","setupCourseTocObserver","courseToc","MutationObserver","mutations","mutation","type","attributeName","observe","attributes","trigger","addEventListener","gotoTopLink","getComputedStyle","visibility","toggleSidebarOnHorizontalScroll","scrollX","setupPopoverClickHandlers","setupEventListeners","marginRight","drawer","offsetWidth","drawerWidth","right","isClosingDrawers","checkAndCloseDrawers","hasOpenDrawers","length","key","keyCode"],"mappings":"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"}