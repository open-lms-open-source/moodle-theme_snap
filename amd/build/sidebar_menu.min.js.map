{"version":3,"file":"sidebar_menu.min.js","sources":["../src/sidebar_menu.js"],"sourcesContent":["/* eslint-disable no-trailing-spaces */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the Snap theme sidebar menu functionality\n *\n * @module     theme_snap/sidebar_menu\n * @copyright  2024 Open LMS (https://www.openlms.net)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst SELECTORS = {\n    SIDEBAR: '#snap-sidebar-menu',\n    TRIGGER: '.snap-sidebar-menu-trigger',\n    TRIGGER_ICON: '.snap-sidebar-menu-trigger i',\n    HEADER: 'header',\n    DRAWER_BUTTON: '.snap-sidebar-menu-item[data-activeselector]',\n    MESSAGES_POPOVER: '[data-region=\"popover-region-messages\"]',\n    CLOSE_DRAWER_BUTTON: '[data-action=\"closedrawer\"]',\n    SIDEBAR_MENU_ITEM: '.snap-sidebar-menu-item',\n};\n\nconst CLASSES = {\n    CUSTOM_MENU_ITEM: 'custom-menu-item',\n    SHOW: 'show',\n    ACTIVE: 'active',\n    COLLAPSED: 'collapsed',\n    ROTATE: 'rotate-180'\n};\n\n/**\n * Toggle sidebar menu visibility and update its position\n */\nconst toggleSidebar = () => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const icon = document.querySelector(SELECTORS.TRIGGER_ICON);\n    const isClosing = sidebar.classList.contains(CLASSES.SHOW);\n\n    sidebar.classList.toggle(CLASSES.SHOW);\n    icon.classList.toggle(CLASSES.ROTATE);\n    updateSidebarPosition();\n    \n    // If we're closing the sidebar, close any open drawers\n    if (isClosing) {\n        closeAllDrawers();\n    }\n};\n\n/**\n * Update sidebar position based on header height\n */\nconst updateSidebarPosition = () => {\n    const sidebar = document.querySelector(SELECTORS.SIDEBAR);\n    const header = document.querySelector(SELECTORS.HEADER);\n\n    if (!sidebar || !header) {\n        return;\n    }\n\n    const headerRect = header.getBoundingClientRect();\n    sidebar.style.top = `${headerRect.bottom}px`;\n    sidebar.style.height = `calc(100vh - ${headerRect.bottom}px)`;\n};\n\n/**\n * Handle drawer button clicks\n * @param {Event} e - The event object\n */\nconst handleDrawerButtonClick = (e) => {\n    const button = e.target.closest(SELECTORS.DRAWER_BUTTON);\n    if (!button) {\n        return;\n    }\n\n    const activeSelector = button.dataset.activeselector;\n    if (!activeSelector) {\n        return;\n    }\n\n    // Check if the drawer is being opened\n    setTimeout(() => {\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            // If this drawer is being opened, close others\n            closeOtherDrawers(activeSelector, button);\n            button.classList.add(CLASSES.ACTIVE);\n        } else {\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    }, 50); // Small delay to allow the drawer state to update\n};\n\n/**\n * Close all active drawers except the one matching the given selector\n * @param {string} currentSelector - The selector for the drawer to keep open\n * @param {Element} currentButton - The button that was clicked\n */\nconst closeOtherDrawers = (currentSelector, currentButton) => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n\n    drawerButtons.forEach(button => {\n        if (button === currentButton) {\n            return;\n        }\n\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector || activeSelector === currentSelector) {\n            return;\n        }\n\n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Close all active drawers\n */\nconst closeAllDrawers = () => {\n    const drawerButtons = document.querySelectorAll(SELECTORS.DRAWER_BUTTON);\n    \n    drawerButtons.forEach(button => {\n        const activeSelector = button.dataset.activeselector;\n        if (!activeSelector) {\n            return;\n        }\n        \n        const activeElements = document.querySelectorAll(activeSelector);\n        const isActive = Array.from(activeElements).some(el =>\n            el.classList.contains(CLASSES.SHOW) ||\n            el.classList.contains(CLASSES.ACTIVE) ||\n            !el.classList.contains(CLASSES.COLLAPSED) // Consider not collapsed as active\n        );\n\n        if (isActive) {\n            const isCustomContent = button.classList.contains(CLASSES.CUSTOM_MENU_ITEM);\n            if (isCustomContent) {\n                const clickableElement = button.querySelector('a, button') || button;\n                clickableElement.click();\n            } else {\n                button.click();\n            }\n            button.classList.remove(CLASSES.ACTIVE);\n        }\n    });\n};\n\n/**\n * Handle messages popover click\n * @param {Event} e - The event object\n */\nconst handleMessagesPopoverClick = (e) => {\n    const sidebarItem = e.currentTarget.closest(SELECTORS.SIDEBAR_MENU_ITEM);\n    if (sidebarItem) {\n        const isCollapsed = e.currentTarget.classList.contains(CLASSES.COLLAPSED);\n        if (isCollapsed) {\n            e.currentTarget.classList.remove(CLASSES.COLLAPSED);\n        } else {\n            e.currentTarget.classList.add(CLASSES.COLLAPSED);\n        }\n    }\n};\n\n/**\n * Handle close drawer button clicks\n */\nconst handleCloseDrawerClick = () => {\n    // Remove active classes from all drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.classList.remove(CLASSES.ACTIVE);\n    });\n    \n    // Add collapsed class to messages popover if it's open\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover && !messagesPopover.classList.contains(CLASSES.COLLAPSED)) {\n        messagesPopover.classList.add(CLASSES.COLLAPSED);\n    }\n};\n\n/**\n * Setup all event listeners\n */\nconst setupEventListeners = () => {\n    const trigger = document.querySelector(SELECTORS.TRIGGER);\n    if (trigger) {\n        trigger.addEventListener('click', toggleSidebar);\n    }\n\n    window.addEventListener('resize', updateSidebarPosition);\n    window.addEventListener('scroll', updateSidebarPosition);\n\n    // Add click event listeners to drawer buttons\n    document.querySelectorAll(SELECTORS.DRAWER_BUTTON).forEach(button => {\n        button.addEventListener('click', handleDrawerButtonClick);\n    });\n    \n    // Add click event listener to messages popover\n    const messagesPopover = document.querySelector(SELECTORS.MESSAGES_POPOVER);\n    if (messagesPopover) {\n        messagesPopover.addEventListener('click', handleMessagesPopoverClick);\n    }\n    \n    // Add click event listeners to elements with data-action=\"closedrawer\"\n    document.querySelectorAll(SELECTORS.CLOSE_DRAWER_BUTTON).forEach(element => {\n        element.addEventListener('click', handleCloseDrawerClick);\n    });\n};\n\n/**\n * Initialize the sidebar menu functionality\n */\nexport const init = () => {\n    setupEventListeners();\n    updateSidebarPosition();\n    \n    // Open the sidebar by default\n    toggleSidebar();\n};\n"],"names":["SELECTORS","CLASSES","toggleSidebar","sidebar","document","querySelector","icon","isClosing","classList","contains","toggle","updateSidebarPosition","closeAllDrawers","header","headerRect","getBoundingClientRect","style","top","bottom","height","handleDrawerButtonClick","e","button","target","closest","activeSelector","dataset","activeselector","setTimeout","activeElements","querySelectorAll","Array","from","some","el","closeOtherDrawers","add","remove","currentSelector","currentButton","forEach","click","handleMessagesPopoverClick","currentTarget","handleCloseDrawerClick","messagesPopover","trigger","addEventListener","window","element","setupEventListeners"],"mappings":";;;;;;;;MAwBMA,kBACO,qBADPA,kBAEO,6BAFPA,uBAGY,+BAHZA,iBAIM,SAJNA,wBAKa,+CALbA,2BAMgB,0CANhBA,8BAOmB,8BAPnBA,4BAQiB,0BAGjBC,yBACgB,mBADhBA,aAEI,OAFJA,eAGM,SAHNA,kBAIS,YAJTA,eAKM,aAMNC,cAAgB,WACZC,QAAUC,SAASC,cAAcL,mBACjCM,KAAOF,SAASC,cAAcL,wBAC9BO,UAAYJ,QAAQK,UAAUC,SAASR,cAE7CE,QAAQK,UAAUE,OAAOT,cACzBK,KAAKE,UAAUE,OAAOT,gBACtBU,wBAGIJ,WACAK,mBAOFD,sBAAwB,WACpBR,QAAUC,SAASC,cAAcL,mBACjCa,OAAST,SAASC,cAAcL,sBAEjCG,UAAYU,oBAIXC,WAAaD,OAAOE,wBAC1BZ,QAAQa,MAAMC,cAASH,WAAWI,aAClCf,QAAQa,MAAMG,8BAAyBL,WAAWI,eAOhDE,wBAA2BC,UACvBC,OAASD,EAAEE,OAAOC,QAAQxB,6BAC3BsB,oBAICG,eAAiBH,OAAOI,QAAQC,eACjCF,gBAKLG,YAAW,WACDC,eAAiBzB,SAAS0B,iBAAiBL,gBAChCM,MAAMC,KAAKH,gBAAgBI,MAAKC,IAC7CA,GAAG1B,UAAUC,SAASR,eACtBiC,GAAG1B,UAAUC,SAASR,kBACrBiC,GAAG1B,UAAUC,SAASR,sBAKvBkC,kBAAkBV,eAAgBH,QAClCA,OAAOd,UAAU4B,IAAInC,iBAErBqB,OAAOd,UAAU6B,OAAOpC,kBAE7B,KAQDkC,kBAAoB,CAACG,gBAAiBC,iBAClBnC,SAAS0B,iBAAiB9B,yBAElCwC,SAAQlB,YACdA,SAAWiB,2BAITd,eAAiBH,OAAOI,QAAQC,mBACjCF,gBAAkBA,iBAAmBa,6BAIpCT,eAAiBzB,SAAS0B,iBAAiBL,mBAChCM,MAAMC,KAAKH,gBAAgBI,MAAKC,IAC7CA,GAAG1B,UAAUC,SAASR,eACtBiC,GAAG1B,UAAUC,SAASR,kBACrBiC,GAAG1B,UAAUC,SAASR,qBAGb,IACcqB,OAAOd,UAAUC,SAASR,0BAC7B,EACQqB,OAAOjB,cAAc,cAAgBiB,QAC7CmB,aAEjBnB,OAAOmB,QAEXnB,OAAOd,UAAU6B,OAAOpC,qBAQ9BW,gBAAkB,KACER,SAAS0B,iBAAiB9B,yBAElCwC,SAAQlB,eACZG,eAAiBH,OAAOI,QAAQC,mBACjCF,4BAICI,eAAiBzB,SAAS0B,iBAAiBL,mBAChCM,MAAMC,KAAKH,gBAAgBI,MAAKC,IAC7CA,GAAG1B,UAAUC,SAASR,eACtBiC,GAAG1B,UAAUC,SAASR,kBACrBiC,GAAG1B,UAAUC,SAASR,qBAGb,IACcqB,OAAOd,UAAUC,SAASR,0BAC7B,EACQqB,OAAOjB,cAAc,cAAgBiB,QAC7CmB,aAEjBnB,OAAOmB,QAEXnB,OAAOd,UAAU6B,OAAOpC,qBAS9ByC,2BAA8BrB,OACZA,EAAEsB,cAAcnB,QAAQxB,6BAC3B,CACOqB,EAAEsB,cAAcnC,UAAUC,SAASR,mBAEnDoB,EAAEsB,cAAcnC,UAAU6B,OAAOpC,mBAEjCoB,EAAEsB,cAAcnC,UAAU4B,IAAInC,qBAQpC2C,uBAAyB,KAE3BxC,SAAS0B,iBAAiB9B,yBAAyBwC,SAAQlB,SACvDA,OAAOd,UAAU6B,OAAOpC,yBAItB4C,gBAAkBzC,SAASC,cAAcL,4BAC3C6C,kBAAoBA,gBAAgBrC,UAAUC,SAASR,oBACvD4C,gBAAgBrC,UAAU4B,IAAInC,kCAoClB,KA7BQ,YAClB6C,QAAU1C,SAASC,cAAcL,mBACnC8C,SACAA,QAAQC,iBAAiB,QAAS7C,eAGtC8C,OAAOD,iBAAiB,SAAUpC,uBAClCqC,OAAOD,iBAAiB,SAAUpC,uBAGlCP,SAAS0B,iBAAiB9B,yBAAyBwC,SAAQlB,SACvDA,OAAOyB,iBAAiB,QAAS3B,kCAI/ByB,gBAAkBzC,SAASC,cAAcL,4BAC3C6C,iBACAA,gBAAgBE,iBAAiB,QAASL,4BAI9CtC,SAAS0B,iBAAiB9B,+BAA+BwC,SAAQS,UAC7DA,QAAQF,iBAAiB,QAASH,4BAQtCM,GACAvC,wBAGAT"}