{"version":3,"file":"blocks_drawer.min.js","sources":["../src/blocks_drawer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Blocks drawer module.\n * Drawer related logic.\n *\n * @module     theme_snap/blocks_drawer\n * @copyright  2025 Copyright (c) 2024 Open LMS (https://www.openlms.net)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Drawers from 'theme_boost/drawers';\n\nconst SELECTORS = {\n    DRAWER_OPEN_BUTTON: '.drawer-toggler.drawer-right-toggle > button',\n    BLOCK_SETTINGS: '.block_settings',\n    DRAWER: '.drawer',\n};\n\n/**\n * Setup event listeners.\n */\nconst setupEventListeners = () => {\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        const originalPreventOverlap = e.detail.drawerInstance.preventOverlap;\n        e.detail.drawerInstance.preventOverlap = () => {\n            if (document.querySelector(SELECTORS.DRAWER_OPEN_BUTTON) != document.activeElement) {\n                originalPreventOverlap.call(document.activeElement);\n            }\n        };\n    }, true);\n    document.addEventListener('focusin', (e) => {\n        if (document.querySelector(SELECTORS.DRAWER).contains(document.activeElement) ||\n            document.activeElement.tagName === 'BODY' ||\n            document.activeElement.tagName === 'BUTTON') {\n            e.stopPropagation();\n        }\n    }, true);\n    document.addEventListener('focusout', (e) => {\n        if (document.querySelector(SELECTORS.DRAWER).contains(document.activeElement) ||\n            document.activeElement.tagName === 'BODY' ||\n            document.activeElement.tagName === 'BUTTON') {\n            e.stopPropagation();\n        }\n    }, true);\n};\n\n/**\n * Reposition the settings block above the drawer.\n * Note: This is because the settings block is handled outside the drawer.\n */\nconst repositionSettingsBlock = () => {\n    const settingsBlock = document.querySelector(SELECTORS.BLOCK_SETTINGS);\n    if (settingsBlock) {\n        settingsBlock.parentNode.removeChild(settingsBlock);\n        const drawer = document.querySelector(SELECTORS.DRAWER);\n        drawer.parentNode.insertBefore(settingsBlock, drawer);\n    }\n};\n\nexport const init = () => {\n    setupEventListeners();\n    repositionSettingsBlock();\n};\n"],"names":["SELECTORS","document","addEventListener","Drawers","eventTypes","drawerShow","e","originalPreventOverlap","detail","drawerInstance","preventOverlap","querySelector","activeElement","call","contains","tagName","stopPropagation","settingsBlock","parentNode","removeChild","drawer","insertBefore","repositionSettingsBlock"],"mappings":";;;;;;;;kJA0BMA,6BACkB,+CADlBA,yBAEc,kBAFdA,iBAGM,wBA4CQ,KArChBC,SAASC,iBAAiBC,iBAAQC,WAAWC,YAAYC,UAC/CC,uBAAyBD,EAAEE,OAAOC,eAAeC,eACvDJ,EAAEE,OAAOC,eAAeC,eAAiB,KACjCT,SAASU,cAAcX,+BAAiCC,SAASW,eACjEL,uBAAuBM,KAAKZ,SAASW,mBAG9C,GACHX,SAASC,iBAAiB,WAAYI,KAC9BL,SAASU,cAAcX,kBAAkBc,SAASb,SAASW,gBACxB,SAAnCX,SAASW,cAAcG,SACY,WAAnCd,SAASW,cAAcG,UACvBT,EAAEU,qBAEP,GACHf,SAASC,iBAAiB,YAAaI,KAC/BL,SAASU,cAAcX,kBAAkBc,SAASb,SAASW,gBACxB,SAAnCX,SAASW,cAAcG,SACY,WAAnCd,SAASW,cAAcG,UACvBT,EAAEU,qBAEP,GAOyB,YACtBC,cAAgBhB,SAASU,cAAcX,6BACzCiB,cAAe,CACfA,cAAcC,WAAWC,YAAYF,qBAC/BG,OAASnB,SAASU,cAAcX,kBACtCoB,OAAOF,WAAWG,aAAaJ,cAAeG,UAMlDE"}